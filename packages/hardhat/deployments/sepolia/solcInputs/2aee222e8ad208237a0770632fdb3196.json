{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "contracts/EventManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * This contract is an event managing contract\r\n * @author Kaviraj\r\n */\r\ncontract EventManager is ReentrancyGuard {\r\n\tstruct TicketType {\r\n\t\tuint256 price;\r\n\t\tuint256 totalQuantity;\r\n\t\tuint256 availableQuantity;\r\n\t}\r\n\tstruct Ticket {\r\n\t\tuint256 eventId;\r\n\t\tstring ticketType;\r\n\t\tuint256 quantity;\r\n\t}\r\n\r\n\tstruct Event {\r\n\t\tuint256 eventId;\r\n\t\tstring name;\r\n\t\tstring description;\r\n\t\tstring location;\r\n\t\tuint256 time;\r\n\t\tbool isCancelled;\r\n\t\taddress organizer;\r\n\t}\r\n\r\n\t// eventId => Event\r\n\tmapping(uint256 => Event) public events;\r\n\t// eventId => ticketTypeName => TicketType\r\n\tmapping(uint256 => mapping(string => TicketType)) public ticketTypes;\r\n\t// organizer => list of their events' ids\r\n\tmapping(address => uint256[]) private organizerEvents;\r\n\t// userId => eventId => ticketTypeName => quantity\r\n\tmapping(address => mapping(uint256 => mapping(string => uint256)))\r\n\t\tpublic ticketOwnership;\r\n\t// eventId => ticketTypeNameArray\r\n\tmapping(uint256 => string[]) eventTicketTypes;\r\n\tmapping(address => Ticket[]) public userTickets;\r\n\r\n\tuint256 private nextEventId;\r\n\r\n\tevent EventCreated(\r\n\t\tuint256 indexed eventId,\r\n\t\tstring name,\r\n\t\tstring description,\r\n\t\tstring location,\r\n\t\tuint256 time,\r\n\t\taddress organizer\r\n\t);\r\n\tevent TicketTypeAdded(\r\n\t\tuint256 indexed eventId,\r\n\t\tstring ticketType,\r\n\t\tuint256 price,\r\n\t\tuint256 quantity\r\n\t);\r\n\tevent TicketPurchased(\r\n\t\taddress indexed buyer,\r\n\t\tuint256 indexed eventId,\r\n\t\tstring ticketType,\r\n\t\tuint256 quantity\r\n\t);\r\n\tevent TicketCancelled(\r\n\t\taddress indexed holder,\r\n\t\tuint256 indexed eventId,\r\n\t\tstring ticketType,\r\n\t\tuint256 quantity\r\n\t);\r\n\tevent EventCancelled(uint256 indexed eventId);\r\n\r\n\tmodifier onlyOrganizer(uint256 eventId) {\r\n\t\trequire(\r\n\t\t\tevents[eventId].organizer == msg.sender,\r\n\t\t\t\"You are not the organizer of this event.\"\r\n\t\t);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier eventExists(uint256 eventId) {\r\n\t\trequire(\r\n\t\t\tbytes(events[eventId].name).length > 0,\r\n\t\t\t\"The event does not exist.\"\r\n\t\t);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier notCancelled(uint256 eventId) {\r\n\t\trequire(!events[eventId].isCancelled, \"The event is cancelled.\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction createEvent(\r\n\t\tstring memory name,\r\n\t\tstring memory description,\r\n\t\tstring memory location,\r\n\t\tuint256 time\r\n\t) public {\r\n\t\trequire(time > block.timestamp, \"Event time must be in the future.\");\r\n\r\n\t\tuint256 eventId = nextEventId++;\r\n\t\tevents[eventId] = Event(\r\n\t\t\teventId,\r\n\t\t\tname,\r\n\t\t\tdescription,\r\n\t\t\tlocation,\r\n\t\t\ttime,\r\n\t\t\tfalse,\r\n\t\t\tmsg.sender\r\n\t\t);\r\n\t\torganizerEvents[msg.sender].push(eventId);\r\n\r\n\t\temit EventCreated(\r\n\t\t\teventId,\r\n\t\t\tname,\r\n\t\t\tdescription,\r\n\t\t\tlocation,\r\n\t\t\ttime,\r\n\t\t\tmsg.sender\r\n\t\t);\r\n\t}\r\n\r\n\tfunction addTicketType(\r\n\t\tuint256 eventId,\r\n\t\tstring memory ticketType,\r\n\t\tuint256 price,\r\n\t\tuint256 quantity\r\n\t) public onlyOrganizer(eventId) eventExists(eventId) {\r\n\t\trequire(price > 0, \"Price must be greater than zero.\");\r\n\t\trequire(quantity > 0, \"Quantity must be greater than zero.\");\r\n\r\n\t\tticketTypes[eventId][ticketType] = TicketType(\r\n\t\t\tprice,\r\n\t\t\tquantity,\r\n\t\t\tquantity\r\n\t\t);\r\n\t\teventTicketTypes[eventId].push(ticketType);\r\n\r\n\t\temit TicketTypeAdded(eventId, ticketType, price, quantity);\r\n\t}\r\n\r\n\tfunction buyTicket(\r\n\t\tuint256 eventId,\r\n\t\tstring memory ticketType,\r\n\t\tuint256 quantity\r\n\t) public payable notCancelled(eventId) eventExists(eventId) nonReentrant {\r\n\t\tTicketType storage t = ticketTypes[eventId][ticketType];\r\n\t\trequire(\r\n\t\t\tquantity > 0 && quantity <= t.availableQuantity,\r\n\t\t\t\"Not enough tickets available.\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tmsg.value == t.price * quantity,\r\n\t\t\t\"Incorrect amount of ether sent.\"\r\n\t\t);\r\n\r\n\t\t// ticketOwnership[msg.sender][eventId][ticketType] += quantity;\r\n\t\tt.availableQuantity -= quantity;\r\n\t\tuserTickets[msg.sender].push(\r\n\t\t\tTicket({\r\n\t\t\t\teventId: eventId,\r\n\t\t\t\tticketType: ticketType,\r\n\t\t\t\tquantity: quantity\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\temit TicketPurchased(msg.sender, eventId, ticketType, quantity);\r\n\t}\r\n\r\n\tfunction cancelTicket(\r\n    uint256 eventId,\r\n    string memory ticketType,\r\n    uint256 quantity\r\n) public nonReentrant {\r\n    (uint256 userTicketIndex, bool isPresent) = getUserTicketIndex(eventId, ticketType);\r\n    require(isPresent, \"You do not own enough tickets to cancel.\");\r\n\r\n    Ticket storage userTicket = userTickets[msg.sender][userTicketIndex];\r\n    require(userTicket.quantity >= quantity, \"You do not own enough tickets to cancel.\");\r\n\r\n    // Event storage eventInfo = events[eventId];\r\n    TicketType storage ticketTypeInfo = ticketTypes[eventId][ticketType];\r\n\r\n    userTicket.quantity -= quantity;\r\n    ticketTypeInfo.availableQuantity += quantity;\r\n\r\n    uint256 refundAmount = ticketTypeInfo.price * quantity;\r\n    payable(msg.sender).transfer(refundAmount);\r\n\r\n    emit TicketCancelled(msg.sender, eventId, ticketType, quantity);\r\n}\r\n\r\nfunction getUserTicketIndex(uint256 eventId, string memory ticketType) internal view returns (uint256, bool) {\r\n    Ticket[] storage tickets = userTickets[msg.sender];\r\n    for (uint256 i = 0; i < tickets.length; i++) {\r\n        if (tickets[i].eventId == eventId && keccak256(bytes(tickets[i].ticketType)) == keccak256(bytes(ticketType))) {\r\n            return (i, true);\r\n        }\r\n    }\r\n    return (0, false);\r\n}\r\n\r\n\r\n\tfunction withdrawFunds(uint256 eventId) public onlyOrganizer(eventId) {\r\n\t\trequire(\r\n\t\t\tevents[eventId].time < block.timestamp,\r\n\t\t\t\"The event has not ended yet.\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tevents[eventId].isCancelled == false,\r\n\t\t\t\"The event is cancelled.\"\r\n\t\t);\r\n\r\n\t\tuint256 totalAmount = 0;\r\n\t\tstring[] memory ticketTypesArray = eventTicketTypes[eventId];\r\n\r\n\t\tfor (uint256 i = 0; i < ticketTypesArray.length; i++) {\r\n\t\t\tstring memory ticketType = ticketTypesArray[i];\r\n\t\t\tTicketType storage ticket = ticketTypes[eventId][ticketType];\r\n\t\t\tuint256 ticketsSold = ticket.totalQuantity -\r\n\t\t\t\tticket.availableQuantity;\r\n\t\t\ttotalAmount += ticketsSold * ticket.price;\r\n\t\t}\r\n\r\n\t\trequire(totalAmount > 0, \"No funds available for withdrawal.\");\r\n\r\n\t\t// Transfer funds to the organizer\r\n\t\tpayable(msg.sender).transfer(totalAmount);\r\n\t}\r\n\r\n\tfunction cancelEvent(\r\n\t\tuint256 eventId\r\n\t) public onlyOrganizer(eventId) notCancelled(eventId) eventExists(eventId) {\r\n\t\tevents[eventId].isCancelled = true;\r\n\t\temit EventCancelled(eventId);\r\n\t}\r\n\r\n\tfunction getEventTicketDetails(\r\n\t\tuint256 eventId\r\n\t)\r\n\t\tpublic\r\n\t\tview\r\n\t\teventExists(eventId)\r\n\t\treturns (\r\n\t\t\tstring[] memory,\r\n\t\t\tuint256[] memory,\r\n\t\t\tuint256[] memory,\r\n\t\t\tuint256[] memory\r\n\t\t)\r\n\t{\r\n\t\tstring[] memory ticketTypesArray = eventTicketTypes[eventId];\r\n\t\tuint256 numTicketTypes = ticketTypesArray.length;\r\n\r\n\t\tuint256[] memory prices = new uint256[](numTicketTypes);\r\n\t\tuint256[] memory totalQuantities = new uint256[](numTicketTypes);\r\n\t\tuint256[] memory availableQuantities = new uint256[](numTicketTypes);\r\n\r\n\t\tfor (uint256 i = 0; i < numTicketTypes; i++) {\r\n\t\t\tstring memory ticketType = ticketTypesArray[i];\r\n\t\t\tTicketType storage ticket = ticketTypes[eventId][ticketType];\r\n\t\t\tprices[i] = ticket.price;\r\n\t\t\ttotalQuantities[i] = ticket.totalQuantity;\r\n\t\t\tavailableQuantities[i] = ticket.availableQuantity;\r\n\t\t}\r\n\r\n\t\treturn (ticketTypesArray, prices, totalQuantities, availableQuantities);\r\n\t}\r\n\r\n\tfunction getOrganizerEvents(\r\n\t\taddress organizer\r\n\t) public view returns (Event[] memory) {\r\n\t\tuint256[] memory organizerEventsIdArray = organizerEvents[organizer];\r\n\t\tEvent[] memory organizerEventsArray = new Event[](\r\n\t\t\torganizerEventsIdArray.length\r\n\t\t);\r\n\r\n\t\tfor (uint256 i = 0; i < organizerEventsIdArray.length; i++) {\r\n\t\t\tuint256 eventId = organizerEventsIdArray[i];\r\n\t\t\torganizerEventsArray[i] = events[eventId];\r\n\t\t}\r\n\r\n\t\treturn (organizerEventsArray);\r\n\t}\r\n\r\n\tfunction getUserTickets(\r\n\t\taddress userAddress\r\n\t) public view returns (Ticket[] memory) {\r\n\t\treturn userTickets[userAddress];\r\n\t}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}